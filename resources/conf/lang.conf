# description: basic spaCy modifications to parse MIMIC-III clinical text

## Components
#
# a component to add entities based on regular expressions
[mimic_component]
class_name = zensols.nlp.Component
modules = list: zensols.nlp.component
pipe_name = regexner
pipe_add_kwargs = dict: {'first': True}
pipe_config = eval({'import': ['from zensols.mimic import MimicTokenDecorator as D']}):
  {'patterns': [(None, [D.PSEUDO_REGEX.pattern, D.SEP_REGEX.pattern])]}

# modifies the spacCy tokenizer to split on colons (``:``) to capture more
# MIMIC-III pseudo tokens.
[mimic_tokenizer_component]
class_name = zensols.mimic.MimicTokenizerComponent


## Document parser
#
# note we do not use mimic_default:{mednlp_}token_feature_ids--that is set in
# decorator.conf for those that turn this specifically to add the `mimic_`
# entity
#
# override to add the MIMIC corpus handling components and remove empty
# sentences created by two spaces and other whitespace between sentences
[doc_parser]
components = instance: list: mimic_component, mimic_tokenizer_component
remove_empty_sentences = True

# override to mirror overrides in doc_parser and use the default doc_parser
# token feature IDs in the default (compare to decorator.conf)
[mednlp_doc_parser]
components = ${doc_parser:components}
remove_empty_sentences = ${doc_parser:remove_empty_sentences}
