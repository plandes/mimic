[mimic_component]
class_name = zensols.nlp.Component
modules = list: zensols.nlp.component
pipe_name = regexner
pipe_add_kwargs = dict: {'first': True}
pipe_config = eval({'import': ['from zensols.mimic import MimicTokenDecorator as D']}):
  {'patterns': [(None, [D.PSEUDO_REGEX.pattern, D.SEP_REGEX.pattern])]}

[mimic_tokenizer_component]
class_name = zensols.mimic.MimicTokenizerComponent

[filter_token_mapper]
remove_space = True

[newline_split_token_mapper]
class_name = zensols.nlp.SplitTokenMapper
regex = r'[\n]'

# get rid of empty tokens after split on newline
[filter_empty]
class_name = zensols.nlp.FilterRegularExpressionMapper
regex = eval({'import': ['re']}): re.compile('^${regular_expression_escape:dollar}')
invert = True

[map_filter_token_normalizer]
mapper_class_list = list: filter_token_mapper, newline_split_token_mapper, filter_empty

[doc_parser]
components = instance: list: mimic_component, mimic_tokenizer_component
remove_empty_sentences = True

[mednlp_doc_parser]
components = ${doc_parser:components}
remove_empty_sentences = ${doc_parser:remove_empty_sentences}
